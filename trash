#!/bin/bash
# ------------------------------------------------------------------------------
# 
# File: trash
# Author: Gabe Gonzalez
#         
# Brief: Delete and recover files, list the contents and size of the trash, and
#        more.
# 
# ------------------------------------------------------------------------------

##
# Project name.
##
PROJECT="${0##*/}"

##
# Files/directories
##
TRASH_SHARE_DIR="${HOME}/.local/share/${PROJECT}"

##
# Options.
##
VERBOSE=true
DELETE=
EMPTY=
INSTALL=
LIST=
LOCATION=
RECOVER=
SIZE=
UNINSTALL=

##
# Exit statuses.
##
EXIT_TRASH_DOES_NOT_EXIST=11
EXIT_TRASH_RECOVER_FILE_NOT_FOUND=12
EXIT_TRASH_PROMPT_INDEX_INVALID=13

##
# Trash Can.
##
main()
{
    if [ "${1}" == "-d" -o "${1}" == "--delete" ]
    then
        shift
        trash_delete "${@}"
        return $?
    fi

	# Options
    local short="hlLr:s"
    local long="help,empty,install,list,location,recover:,size,uninstall"
	local args=

    # Parse options
    args=$(getopt -o "${short}" --long "${long}" --name "${PROJECT}" \
				-- "${@}")
    if [ $? -ne 0 ]
    then
        usage
        return 1
    fi
    eval set -- "${args}"

    while true
    do
        case "${1}" in
            -h|--help)
                usage
                exit 0
                ;;
            --empty)
                EMPTY=true
                ;;
            --install)
                INSTALL=true
                ;;
            -l|--list)
                LIST=true
                ;;
            -L|--location)
                LOCATION=true
                ;;
            -r|--recover)
                shift
                RECOVER="${1}"
                ;;
            -s|--size)
                SIZE=true
                ;;
            --uninstall)
                UNINSTALL=true
                ;;
            *)
                break
                ;;
        esac
        shift
    done

    # Run checks
    if [ ! -d "${TRASH_SHARE_DIR}" -a -z "${INSTALL}" ]
    then
        echo "${PROJECT}: Trash has not been installed yet." 1>&2
        echo "${PROJECT}: See '--install' for more info." 1>&2
        return ${EXIT_TRASH_DOES_NOT_EXIST}
    fi

    # Run options
    if [ -n "${EMPTY}" ]
    then
        trash_empty
    elif [ -n "${INSTALL}" ]
    then
        trash_install
    elif [ -n "${LIST}" ]
    then
        trash_list
    elif [ -n "${LOCATION}" ]
    then
        trash_location
    elif [ -n "${RECOVER}" ]
    then
        trash_recover "${RECOVER}"
    elif [ -n "${SIZE}" ]
    then
        trash_size
    elif [ -n "${UNINSTALL}" ]
    then
        trash_uninstall
    else
        :
    fi

    return $?
}

##
# Print program usage.
##
usage()
{
    echo "Usage: ${PROJECT} [options]"
    echo 
    echo "Options:"
    echo "    -h, --help"
    echo "        Print program usage."
    echo 
    echo "    -d, --delete=<files>"
    echo "        Delete one or more files."
    echo 
    echo "    --empty"
    echo "        Empty the trash can."
    echo 
    echo "    --install"
    echo "        Install the trash can."
    echo 
    echo "    -l, --list"
    echo "        List the contents of the trash can."
    echo 
    echo "    -L, --location"
    echo "        Print the location of the trash can."
    echo 
    echo "    -r, --recover=<file>"
    echo "        Recover a file from the trash can."
    echo 
    echo "    -s, --size"
    echo "        Print the size of the trash can."
    echo 
    echo "    --uninstall"
    echo "        Uninstall the trash can."
    echo 
}

##
# Install the trash can.
##
trash_install()
{
    echo ":: Installing the trash can."
    mkdir -pv "${TRASH_SHARE_DIR}"
    return $?
}

##
# Delete the input file(s) by moving them to the trash can.
##
trash_delete()
{
    local dest="${TRASH_SHARE_DIR}"/$(date +%Y-%m-%d)
    local now=$(date +%H%M%S)
    local file=
    for file in "${@}"
    do
        if [ ! -e "${file}" ]
        then
            echo "${PROJECT}: File '${file}' does not exist." 1>&2
            continue
        fi
        if [ ! -d "${dest}" ]
        then
            mkdir -p "${dest}"
        fi
        echo ":: Deleting '${file}'."
        local name=$(basename "${file}")-"${now}"
        mv "${file}" "${dest}/${name}"
    done
    return $?
}

##
# Empty the trash can.
##
trash_empty()
{
    local response=
    echo "Are you sure you want to empty the trash can?"
    read -p "> " response
    case "${response}" in
        y|Y|yes|Yes|YES)
            echo ":: Emptying trash can."
            rm -rfv "${TRASH_SHARE_DIR}"/*
            ;;
        *)
            echo ":: Exiting."
            ;;
    esac
    return $?
}

##
# List the contents of the trash.
##
trash_list()
{
    builtin cd "${TRASH_SHARE_DIR}"
    find *
    return $?
}

##
# Print the location of the trash.
##
trash_location()
{
    echo "Trash Location: '${TRASH_SHARE_DIR}'"
    return $?
}

##
# Recover a deleted file.
##
trash_recover()
{
    local file="${1}"
    local IFS=$'\n'
    local matches=($(trash_recovery_get_matches "${file}"))
    local index=
    trash_recovery_prompt "${matches[@]}" || return $?
    read -p "> " index
    trash_recovery_prompt_valid "${index}" "${#matches[@]}"
    local fullrecfile="${matches[$[${index}-1]]}"
    local baserecfile=$(basename "${fullrecfile}")
    baserecfile="${baserecfile%-*}"
    echo 
    echo ":: Recovering '${baserecfile}'."
    mv "${TRASH_SHARE_DIR}/${fullrecfile}" "${baserecfile}"
}

##
# Print the size of the trash can.
##
trash_size()
{
    local size=$(du -sh "${TRASH_SHARE_DIR}" 2> /dev/null | awk '{ print $1 }')
    echo "Trash Size: ${size}"
    return $?
}

##
# Uninstall the trash can.
##
trash_uninstall()
{
    echo ":: Uninstalling trash can at: '${TRASH_SHARE_DIR}'."
    rm -rf "${TRASH_SHARE_DIR}"
    return $?
}

##
# Prompt user for which file to recover.
##
trash_recovery_prompt()
{
    if [ $# -eq 0 ]
    then
        echo "${PROJECT}: No files matching '${file}' found." 1>&2
        return ${EXIT_TRASH_RECOVER_FILE_NOT_FOUND}
    fi

    local matches=("${@}")
    echo "Which file would you like to recover?"
    echo
    local len=$(echo -n "${#matches[@]}" | wc -c)
    local i=1
    local m=
    for m in "${matches[@]}"
    do
        local tsdate="${m%%/*}"
        local substring="${m/${tsdate}\//}"
        local deletedfile="${substring%%/*}"
        local tstime="${deletedfile##*-}"
        local ts="${tsdate} ${tstime:0:2}:${tstime:2:2}:${tstime:4:2}"
        local timestamp=$(date -d "${ts}" +"%a %b %d %_I:%M:%S %p")
        local name=$(basename "${m}")
        name="${name/-${tstime}/}"
        printf "%${len}d: %s | %s\n" "${i}" "${timestamp}" "${name}"
        i=$[ ${i} + 1 ]
    done
}

##
# Return file recovery matches.
##
trash_recovery_get_matches()
{
    builtin cd "${TRASH_SHARE_DIR}"
    local file="${1}"
    local IFS=$'\n'
    find * -name "*${file}*"
}

##
# Verify recovery file index is valid.
##
trash_recovery_prompt_valid()
{
    local index="${1}"
    local max="${2}"
    if [ -z "${index}" ]
    then
        echo ":: Exiting."
        return ${EXIT_SUCCESS}
    fi
    if ! is_integer "${index}" || \
        [ ${index} -lt 1 -o ${index} -gt ${max} ]
    then
        echo "${PROJECT}: Unable to recover file: Invalid value entered." 1>&2
        return ${EXIT_TRASH_PROMPT_INDEX_INVALID}
    fi
}

##
# Run the script.
##
main "${@}"
